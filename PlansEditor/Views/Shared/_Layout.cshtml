<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <link href="https://unpkg.com/tabulator-tables@4.6.1/dist/css/tabulator.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@4.6.1/dist/js/tabulator.min.js"></script>
    <script>
 // todo: require
        const baseURL = "../api/";
        const addIndex = 0, deleteIndex = 2;
        let saveDataMethods = ["POST", "PUT", "DELETE"];
        let tableData;
        let baseConfig = {
            ajaxFiltering: true,
            ajaxSorting: true,
            dataLoaded: function(data) {
                tableData = data.map(v => Object.assign({}, v));
            },
            index: "Id",
            pagination: "remote",
            paginationSize: @Plans.Domain.Constants.PageSize,
        };
        let tabulator;

        function init() {
            tabulator = new Tabulator("#tabulator", getConfig());
            if (typeof afterInit != "undefined") afterInit();
        }

        function saveData() {
            let data = tabulator.getData();
            let addedRows = data.filter(row => !row.Id);
            let updatedRows = tableData.reduce((rows, row) => {
                let curr = data.find(_row => _row.Id == row.Id);
                if (curr && JSON.stringify(curr) != JSON.stringify(row)) {
                    rows.push(curr);
                }
                return rows;
            }, []);
            let deletedRows = tableData.reduce((rows, row) => {
                    if (!data.find(_row =>
                        _row.Id == row.Id
                    )) {
                        rows.push(row);
                    }
                    return rows;
                },
                []);
            let deletedRowIds = deletedRows.map(row => row.Id);
            _saveData(0, [addedRows, updatedRows, deletedRowIds]);
        }

        function _saveData(index, data) {
            if (index > deleteIndex) {
                if (data[addIndex].length || data[deleteIndex].length) {
                    tabulator.setData();
                }
                return;
            }

            if (data[index].length) {
                fetch(baseURL + "plan",
                    {
                        method: saveDataMethods[index],
                        headers: {
                          'Accept': 'application/json',
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data[index])
                    }).then(
                    response => {
                        if (!response.ok) {
                            alert("Save failed");
                            return;
                        } else {
                                _saveData(index + 1, data);
                        }
                    });
            } else {
                _saveData(index + 1, data);
            }
        }

        function getDeleteColumn() {
            return {
                formatter: "buttonCross", width: 40, hozAlign: "center", cellClick: function (e, cell) {
                    cell.getRow().delete();
                }
            }
        }


        function newRow() {
            tabulator.addRow();
        }
    </script>
</head>
<body onload="init()">
    <div>
        @RenderBody()
        <button onclick="newRow()">Add Row</button>
        <button onclick="saveData()">Save</button>
        <div id="tabulator"></div>
    </div>
</body>
</html>
